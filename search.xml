<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello, World!</title>
    <url>/2018/04/07/Hello-World-0/</url>
    <content><![CDATA[<p><img src="http://static.zybuluo.com/Ukn/5aen2grrjkkki1zq7vwb736j/Hello.png" alt="Hello.png-15.9kB"></p>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>网络流相关模板</title>
    <url>/2018/04/08/NWF/</url>
    <content><![CDATA[<p>包含 Dinic 费用流 无&#x2F;有源汇网络流</p>
<span id="more"></span>

<p>网络流 Dinic:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v,nxt,flow;</span><br><span class="line">&#125;e[<span class="number">5000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ecnt,head[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adde</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].nxt = head[u];</span><br><span class="line">    head[u] = ecnt;</span><br><span class="line">    e[ecnt].flow = flow;</span><br><span class="line">    ecnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s,t;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">100050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">-1</span>,<span class="built_in">sizeof</span>(dep));</span><br><span class="line">    dep[t] = <span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(u == s)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[u];~i;i = e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(e[i ^ <span class="number">1</span>].flow &amp;&amp; dep[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//printf(&quot;%d %d\n&quot;,v,u);</span></span><br><span class="line">                que.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> curedge[<span class="number">100050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == t)</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> delta = flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[s];~i;i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(dep[v] == dep[s] - <span class="number">1</span> &amp;&amp; e[i].flow)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%d %d\n&quot;,s,v);</span></span><br><span class="line">            <span class="type">int</span> g = <span class="built_in">dfs</span>(v,t,<span class="built_in">min</span>((<span class="type">int</span>)e[i].flow,delta));</span><br><span class="line">            delta -= g;</span><br><span class="line">            e[i].flow -= g;</span><br><span class="line">            e[i ^ <span class="number">1</span>].flow += g;</span><br><span class="line">            <span class="keyword">if</span>(!delta)</span><br><span class="line">                <span class="keyword">return</span> flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dep[s] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> flow - delta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(curedge,head,<span class="built_in">sizeof</span>(head));</span><br><span class="line">        ans += <span class="built_in">dfs</span>(s,t,<span class="number">0x3f3f3f3f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>费用流</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v,nxt,flow,w;</span><br><span class="line">&#125;e[<span class="number">50000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adde</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> flow,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].nxt = head[u];</span><br><span class="line">    e[ecnt].w = w;</span><br><span class="line">    head[u] = ecnt;</span><br><span class="line">    e[ecnt].flow = flow;</span><br><span class="line">    ecnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0x3f3f3f3f</span>,<span class="built_in">sizeof</span>(dep));</span><br><span class="line">    <span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="built_in">sizeof</span>(inq));</span><br><span class="line">    dep[t] = <span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[u];~i;i = e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(e[i ^ <span class="number">1</span>].flow &amp;&amp; dep[u] - e[i].w &lt; dep[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dep[v] = dep[u] + e[i ^ <span class="number">1</span>].w;</span><br><span class="line">                <span class="keyword">if</span>(!inq[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(que.<span class="built_in">empty</span>() || dep[v] &lt; dep[que.<span class="built_in">front</span>()])</span><br><span class="line">                        que.<span class="built_in">push_front</span>(v);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        que.<span class="built_in">push_back</span>(v);</span><br><span class="line">                    inq[v] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        inq[u] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[s] &lt; <span class="number">1061109567</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == t)</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> delta = flow;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[s];~i;i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v] &amp;&amp; dep[v] == dep[s] - e[i].w &amp;&amp; e[i].flow)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%d %d\n&quot;,s,v);</span></span><br><span class="line">            <span class="type">int</span> g = <span class="built_in">dfs</span>(v,t,<span class="built_in">min</span>((<span class="type">int</span>)e[i].flow,delta));</span><br><span class="line">            delta -= g;</span><br><span class="line">            ans += g * e[i].w;</span><br><span class="line">            e[i].flow -= g;</span><br><span class="line">            e[i ^ <span class="number">1</span>].flow += g;</span><br><span class="line">            <span class="keyword">if</span>(!delta)</span><br><span class="line">                <span class="keyword">return</span> flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow - delta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> anss = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        vis[t] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(vis[t])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">            anss += <span class="built_in">dfs</span>(s,t,<span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终结果为ans</p>
<p>无源汇上下界网络流(只有建图)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(inv,<span class="number">0</span>,<span class="built_in">sizeof</span>(inv));</span><br><span class="line"><span class="built_in">memset</span>(ouv,<span class="number">0</span>,<span class="built_in">sizeof</span>(ouv));</span><br><span class="line">ecnt = <span class="number">0</span>;</span><br><span class="line">s = <span class="number">0</span>,t = <span class="number">50050</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m; ++ i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fr,to,liml,limr;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;fr,&amp;to,&amp;liml,&amp;limr);</span><br><span class="line">    <span class="built_in">adde</span>(fr,to,limr - liml,liml);</span><br><span class="line">    <span class="built_in">adde</span>(to,fr,<span class="number">0</span>,liml);</span><br><span class="line">    inv[to] += liml;</span><br><span class="line">    ouv[fr] += liml;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> qsum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(inv[i] &gt; ouv[i])</span><br><span class="line">        <span class="built_in">adde</span>(s,i,inv[i] - ouv[i],<span class="number">0</span>),<span class="built_in">adde</span>(i,s,<span class="number">0</span>,<span class="number">0</span>),qsum += inv[i]-ouv[i];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">adde</span>(i,t,ouv[i]-inv[i],<span class="number">0</span>),<span class="built_in">adde</span>(t,i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dinic</span>() == qsum) 有解;</span><br><span class="line"><span class="keyword">else</span> 无解;</span><br></pre></td></tr></table></figure>

<p>有源汇上下界网络流<br>$ss$ $tt$为源汇<br>$s$ $t$为超级源点汇点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= tt; ++ i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(inf[i] &gt; ouf[i])</span><br><span class="line">        <span class="built_in">adde</span>(s,i,inf[i]-ouf[i]),<span class="built_in">adde</span>(i,s,<span class="number">0</span>),sum += inf[i] - ouf[i];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">adde</span>(i,t,ouf[i]-inf[i]),<span class="built_in">adde</span>(t,i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tot1 = <span class="built_in">dinic</span>();</span><br><span class="line"><span class="built_in">adde</span>(tt,ss,<span class="number">0x3f3f3f3f</span>);</span><br><span class="line"><span class="built_in">adde</span>(ss,tt,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> tot2 = <span class="built_in">dinic</span>();</span><br><span class="line"><span class="keyword">if</span>(tot1 + tot2 == sum)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,e[ecnt - <span class="number">1</span>].flow);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;impossible\n&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>最大流</tag>
        <tag>费用流</tag>
        <tag>网络流</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>How Many Hougong题解</title>
    <url>/2018/04/07/How-many-hougong/</url>
    <content><![CDATA[<h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a><strong>题目简述</strong></h3><p>给定一串长度为 $n$ 的序列，每个点上有一个权值 $a_i$ ，现在你需要处理 $q$ 个操作，有以下两种操作：</p>
<p>$1$ $val$</p>
<p>表示你需要构造一个序列，序列中每一个元素 $seq_i$ 小于等于 $a_i$ 且大于 $0$，问所有合法的序列中 $val$ 出现了几次。</p>
<p>$2$ $pos$ $val$</p>
<p>表示把 $pos$ 号节点的点权修改为 $val$，点的编号从 $0$ 开始。</p>
<p>对于每一个询问 $2$ ，请输出操作的结果 $mod$ $p$，$p$ 为质数。</p>
<span id="more"></span>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h3><p>考虑每个节点对答案的贡献：<br>显然总方案数为<br>$$\prod_{i&#x3D;0}^{n-1} a_i$$<br>显然若第 $i$ 号节点的 $a_i &lt; val$ ，则 $i$ 节点对答案贡献为 $0$<br>若第 $i$ 号节点 $a[i] &gt;&#x3D; val$ ，则 $i$ 节点对答案的贡献为<br>$$\frac{\prod_{i&#x3D;0}^{n-1}a_i}{a_i}$$</p>
<p>考虑一次询问，我们要求的就是：</p>
<p>$$\frac{\prod_{i&#x3D;0}^{n-1}a_i}{a_{i1}} + \frac{\prod_{i&#x3D;0}^{n-1}a_i}{a_{i2}} + \frac{\prod_{i&#x3D;0}^{n-1}a_i}{a_{i3}} + \cdots + \frac{\prod_{i&#x3D;0}^{n-1}a_i}{a_{im}}$$</p>
<p>并且</p>
<p>$$a_{i1},a_{i2},a_{i3},\cdots,a_{im} &gt;&#x3D; val$$</p>
<p>这显然是不能快速求的。<br>观察题目发现 $p$ 为质数，考虑使用费马小定理求解，则得到：</p>
<p>$$\prod_{i&#x3D;0}^{n-1}a_i \times (a_{i1}^{mod - 2} + a_{i2}^{mod - 2} + \cdots + a_{im}^{mod - 2})$$</p>
<p>有人可能会说： </p>
<blockquote>
<p>Wen_kr, 你这样不会重复累计吗？</p>
</blockquote>
<p>实际上并不会，由于<br>$$\prod_{i&#x3D;0}^{n-1}a_i \times a_{i1}^{mod-2}$$<br>累积的是当 $a_{i1}$ 为 $val$ 时对答案的贡献，即在其他所有情况时， $a_{i1}$ 对答案的贡献，因此，这样的统计是<strong>无重复无遗漏</strong>的。</p>
<p>这样一来，我们只需要把 $a_{i}^{mod - 2}$ 用数据结构维护起来就可以求解了！<br>考虑使用线段树。<br>把所有的 $a_i$ 与所有询问的 $val$ 插入同一个数组排序，再把数组 $unique$ 一下，我们设现在的数组大小为 $tot$ ，修改操作，我们把 $a_i$ $lowerbound$ 一下，在 $lowerbound$ 的位置处修改。<br>对于查询操作，我们把查询的 $val$ $lowerbound$ 一下，设$lowerbound$结果为 $p$，则最终结果即为从 $p$ 到 $tot$ 所有元素的和。<br>这样使用线段树就十分方便。</p>
<p>接着考虑操作 $2$</p>
<p>线段树的修改是很好完成的，只需要回滚一次+修改一次即可得到解。</p>
<p>就只剩下一个问题：怎么维护新的累乘之积。</p>
<p>考虑使用费马小定理，新的累乘之和即为：</p>
<p>$$\prod_{i&#x3D;0}^{n-1}a_i \times a_{pos}^{mod - 2} \times val$$</p>
<p><strong>就可以完成啦…吗？</strong></p>
<p>当你欣喜地写完程序，测完样例，却发现，样例都无法过去……</p>
<p>因此，我们目前的方法，仍然有严重的漏洞。</p>
<h3 id="是什么呢？"><a href="#是什么呢？" class="headerlink" title="是什么呢？"></a><strong>是什么呢？</strong></h3><p>我们考虑一个数 $a_i$ ，假设$a_i % mod &#x3D; 0 $，当我们修改 $a_i$ 回滚操作的时候，能显然发现这样是不对的，因为这样回滚，就是把累乘之积除上了一个 $0$ !</p>
<p>考虑用一个新的变量 $c$ 来记录当前序列中有多少个 $a_i$ 使 $a_i % mod &#x3D; 0$<br>新开一棵线段树，维护一段区间内有多少个 $a_i$ 满足这个条件。<br>对于每个满足条件的 $a_i$ ，因为 $a_i^{mod - 2} &#x3D; 0$ ，因此我们没有必要将它插入原线段树，并且因为乘了 $a_i$ 之后，我们维护累乘之积的变量会始终为零并会出现错误，因此累计累乘时也不累计 $a_i$。</p>
<p>查询操作，若 $c &#x3D; 0$ ，我们就像如上文所述的查询查值。<br>若 $c &#x3D; 1$ ，我们在 $p$ 到 $tot$ 上求一遍有多少个 $a_i$ 满足条件，$p$的意义如上文所述。<br>这样一来，假如查询的结果为 $0$ ，那么无论如何，累乘的结果 $ % mod$ 始终为 $0$ ，这样结果为 $0$<br>否则由于当且仅当 $a_i$ ($a_i$ 符合上文条件) 对答案的贡献为 $1$，即当 $a_i &#x3D; val$ 时，我们的答案才有值，因此答案为 $\prod_{i&#x3D;0}^{n-1}a_i,a_i\text{不符合上文条件}$<br>可以看出这个答案为上文的累乘之和。</p>
<p>若$c &gt; 1$ 无论我们把哪个值对累乘的贡献置为 $1$，让其等于 $val$，最终的结果均为 $0$</p>
<p>对于修改操作，若被修改的原值 $% mod &#x3D; 0$，我们则更新 $c$ 值与另一棵线段树的值，否则则按原操作方法处理。<br>对于修改后的值，我们同样考虑其 $% mod%$ 的值，分类处理即可。</p>
<h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a><strong>AC Code</strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> all[<span class="number">400050</span>],a[<span class="number">400050</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tot,sum[<span class="number">800050</span>],cnt[<span class="number">800050</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mod,n,q,t,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Caozuo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> op,pos,val;</span><br><span class="line">&#125;op[<span class="number">400050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qpow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> base,<span class="type">long</span> <span class="type">long</span> tms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp = <span class="number">1</span>;</span><br><span class="line">    base %= mod;</span><br><span class="line">    <span class="keyword">while</span>(tms)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tms &amp; <span class="number">1</span>) tmp = tmp * base % mod;</span><br><span class="line">        base = base * base % mod;</span><br><span class="line">        tms &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">long</span> <span class="type">long</span> val[],<span class="type">long</span> <span class="type">long</span> rt,<span class="type">long</span> <span class="type">long</span> pos,<span class="type">long</span> <span class="type">long</span> l,<span class="type">long</span> <span class="type">long</span> r,<span class="type">long</span> <span class="type">long</span> valx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        val[rt] = ((val[rt] + valx) % mod + mod) % mod;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid &gt;= pos) <span class="built_in">Update</span>(val,rt &lt;&lt; <span class="number">1</span>,pos,l,mid,valx);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Update</span>(val,rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,pos,mid + <span class="number">1</span>,r,valx);</span><br><span class="line">    val[rt] = val[rt &lt;&lt; <span class="number">1</span>] + val[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    val[rt] %= mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Query</span><span class="params">(<span class="type">long</span> <span class="type">long</span> val[],<span class="type">long</span> <span class="type">long</span> rt,<span class="type">long</span> <span class="type">long</span> l,<span class="type">long</span> <span class="type">long</span> r,<span class="type">long</span> <span class="type">long</span> l1,<span class="type">long</span> <span class="type">long</span> r1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= l1 &amp;&amp; r &lt;= r1) <span class="keyword">return</span> val[rt] % mod;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid &gt;= l1) tmp = (tmp + <span class="built_in">Query</span>(val,rt &lt;&lt; <span class="number">1</span>,l,mid,l1,r1)) % mod;</span><br><span class="line">    <span class="keyword">if</span>(mid &lt; r1) tmp = (tmp + <span class="built_in">Query</span>(val,rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,l1,r1)) % mod;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="built_in">sizeof</span>(sum));<span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="built_in">sizeof</span>(cnt));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;mod,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">        all[++tot] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= q; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;op[i].op);</span><br><span class="line">        <span class="keyword">if</span>(op[i].op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;op[i].val);</span><br><span class="line">            all[++tot] = op[i].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;op[i].pos,&amp;op[i].val);</span><br><span class="line">            all[++tot] = op[i].val;</span><br><span class="line">            op[i].pos ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(all + <span class="number">1</span>,all + tot + <span class="number">1</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mul = <span class="number">1</span>;</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    tot = <span class="built_in">unique</span>(all + <span class="number">1</span>,all + tot + <span class="number">1</span>) - all - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> p = <span class="built_in">lower_bound</span>(all + <span class="number">1</span>,all + <span class="number">1</span> + tot,a[i]) - all;</span><br><span class="line">        <span class="keyword">if</span>(a[i] % mod == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c ++;</span><br><span class="line">            <span class="built_in">Update</span>(cnt,<span class="number">1</span>,p,<span class="number">1</span>,tot,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mul = mul * a[i] % mod;</span><br><span class="line">            <span class="built_in">Update</span>(sum,<span class="number">1</span>,p,<span class="number">1</span>,tot,<span class="built_in">qpow</span>(a[i],mod - <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= q; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> val = op[i].val;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> p = <span class="built_in">lower_bound</span>(all + <span class="number">1</span>,all + <span class="number">1</span> + tot,val) - all;</span><br><span class="line">        <span class="keyword">if</span>(op[i].op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,mul * <span class="built_in">Query</span>(sum,<span class="number">1</span>,<span class="number">1</span>,tot,p,tot) % mod);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">Query</span>(cnt,<span class="number">1</span>,<span class="number">1</span>,tot,p,tot) &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,mul);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> pos = op[i].pos;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> px = <span class="built_in">lower_bound</span>(all + <span class="number">1</span>,all + <span class="number">1</span> + tot,a[pos]) - all;</span><br><span class="line">            <span class="keyword">if</span>(a[pos] % mod == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c --;</span><br><span class="line">                <span class="built_in">Update</span>(cnt,<span class="number">1</span>,px,<span class="number">1</span>,tot,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mul = mul * <span class="built_in">qpow</span>(a[pos],mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="built_in">Update</span>(sum,<span class="number">1</span>,px,<span class="number">1</span>,tot,-<span class="built_in">qpow</span>(a[pos],mod - <span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(val % mod == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c ++;</span><br><span class="line">                <span class="built_in">Update</span>(cnt,<span class="number">1</span>,p,<span class="number">1</span>,tot,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mul = mul * val % mod;</span><br><span class="line">                <span class="built_in">Update</span>(sum,<span class="number">1</span>,p,<span class="number">1</span>,tot,<span class="built_in">qpow</span>(val,mod - <span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            a[pos] = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Input</span>();</span><br><span class="line">        <span class="built_in">Work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>费马小定理</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串相关模板</title>
    <url>/2018/04/08/Str/</url>
    <content><![CDATA[<p>包含 KMP Trie AC自动机 dp&#x2F;矩阵优化AC自动机</p>
<span id="more"></span>

<p>KMP:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[<span class="number">1000050</span>],b[<span class="number">1000050</span>];</span><br><span class="line"><span class="type">int</span> nxt[<span class="number">1000050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,a + <span class="number">1</span>,b + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="built_in">sizeof</span>(nxt));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= len; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> lst = nxt[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(a[lst + <span class="number">1</span>] != a[i] &amp;&amp; lst) lst = nxt[lst];</span><br><span class="line">            <span class="keyword">if</span>(a[lst + <span class="number">1</span>] == a[i]) lst ++;</span><br><span class="line">            nxt[i] = lst;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len2 = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len2; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(b[i] != a[cur + <span class="number">1</span>] &amp;&amp; cur) </span><br><span class="line">                cur = nxt[cur];</span><br><span class="line">            <span class="keyword">if</span>(a[cur + <span class="number">1</span>] == b[i]) cur ++;</span><br><span class="line">            <span class="keyword">if</span>(cur == len) ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Trie树</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> son[<span class="number">5000050</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> val[<span class="number">5000050</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(son[<span class="number">0</span>],<span class="number">0</span>,<span class="built_in">sizeof</span>(son[<span class="number">0</span>]));</span><br><span class="line">        val[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init_pos</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(son[pos],<span class="number">0</span>,<span class="built_in">sizeof</span>(son[pos]));</span><br><span class="line">        val[pos] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = son[cur][s[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(u == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                u = ++cnt;</span><br><span class="line">                <span class="built_in">init_pos</span>(u);</span><br><span class="line">                son[cur][s[i] - <span class="string">&#x27;0&#x27;</span>] = cnt;</span><br><span class="line">                cur = u;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(val[u]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                cur = u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        val[cur] ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">work</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">bool</span> yn;</span><br><span class="line">        <span class="keyword">if</span>(val[rt]) yn = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> yn = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">9</span>; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = son[rt][i];</span><br><span class="line">            <span class="keyword">if</span>(v != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(yn) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">work</span>(v)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Tr;</span><br></pre></td></tr></table></figure>

<p>AC自动机</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> son[<span class="number">3000050</span>][<span class="number">26</span>],val[<span class="number">3000050</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">int</span> fail[<span class="number">3000050</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">3000050</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie_AC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_id</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(son[pos],<span class="number">0</span>,<span class="built_in">sizeof</span>(son[pos]));</span><br><span class="line">        val[pos] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *c,<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(c);</span><br><span class="line">        <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = <span class="built_in">get_id</span>(c[i]);</span><br><span class="line">            <span class="type">int</span> tmp = u;</span><br><span class="line">            u = son[u][v];</span><br><span class="line">            <span class="keyword">if</span>(u == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">init</span>(++cnt);</span><br><span class="line">                son[tmp][v] = cnt;</span><br><span class="line">                u = cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        val[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>; ++ i)</span><br><span class="line">            <span class="keyword">if</span>(son[<span class="number">0</span>][i])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(son[<span class="number">0</span>][i]);</span><br><span class="line">                fail[son[<span class="number">0</span>][i]]  = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>; ++ i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> f = fail[u];</span><br><span class="line">                <span class="keyword">if</span>(!son[u][i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">while</span>(f &amp;&amp; !son[f][i]) f = fail[f];</span><br><span class="line">                fail[son[u][i]] = son[f][i];</span><br><span class="line">                <span class="comment">//lst[son[u][i]] = val[fail[son[u][i]]] ? fail[son[u][i]] : lst[fail[son[u][i]]];</span></span><br><span class="line">                q.<span class="built_in">push</span>(son[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(c);</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = <span class="built_in">get_id</span>(c[i]);</span><br><span class="line">            <span class="keyword">while</span>(cur &amp;&amp; !son[cur][v])</span><br><span class="line">                cur = fail[cur];</span><br><span class="line">            cur = son[cur][v];</span><br><span class="line">            <span class="type">int</span> tmp = cur;</span><br><span class="line">            <span class="keyword">while</span>(tmp)</span><br><span class="line">            &#123;</span><br><span class="line">                ans += val[tmp];</span><br><span class="line">                val[tmp] = <span class="number">0</span>;</span><br><span class="line">                tmp = fail[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Trie;</span><br></pre></td></tr></table></figure>
<p>带dp的AC自动机</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> son[<span class="number">2500</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> lst[<span class="number">205</span>],fail[<span class="number">250</span>];</span><br><span class="line"><span class="type">int</span> val[<span class="number">205</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">101</span>][<span class="number">101</span>][<span class="number">202</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_id</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c == <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        son[pos][<span class="number">0</span>] = son[pos][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        val[pos] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span>* c,<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(c);</span><br><span class="line">        <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = son[u][<span class="built_in">get_id</span>(c[i])];</span><br><span class="line">            <span class="keyword">if</span>(!v)</span><br><span class="line">            &#123;</span><br><span class="line">                son[u][<span class="built_in">get_id</span>(c[i])] = ++cnt;</span><br><span class="line">                <span class="built_in">init</span>(cnt);</span><br><span class="line">                u = cnt;        </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                u = v;</span><br><span class="line">        &#125;</span><br><span class="line">        val[u] |= id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        queue &lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        lst[<span class="number">0</span>] = fail[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">1</span>; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = son[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">if</span>(v)</span><br><span class="line">            &#123;</span><br><span class="line">                lst[v] = fail[v] = <span class="number">0</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">            val[u] |= val[lst[u]];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">2</span>; ++ i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> v = son[u][i];</span><br><span class="line">                <span class="keyword">if</span>(!v) </span><br><span class="line">                &#123;</span><br><span class="line">                    son[u][i] = son[fail[u]][i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> f = fail[u];</span><br><span class="line">                <span class="keyword">while</span>(f &amp;&amp; !son[f][i]) f = fail[f];</span><br><span class="line">                fail[v] = son[f][i];</span><br><span class="line">                lst[v] = val[fail[v]] ? fail[v] : lst[fail[v]];</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Do_DP</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n; ++ i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m; ++ j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt;= cnt; ++ k)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>;l &lt; <span class="number">4</span>; ++ l)</span><br><span class="line">                        dp[i][j][k][l] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n; ++ i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m; ++ j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt;= cnt; ++ k)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>;l &lt; <span class="number">4</span>; ++ l)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(dp[i][j][k][l] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">if</span>(i &lt; n)</span><br><span class="line">                            dp[i + <span class="number">1</span>][j][son[k][<span class="number">1</span>]][l | val[son[k][<span class="number">1</span>]]] += dp[i][j][k][l],dp[i + <span class="number">1</span>][j][son[k][<span class="number">1</span>]][l | val[son[k][<span class="number">1</span>]]] %= mod;</span><br><span class="line">                        <span class="keyword">if</span>(j &lt; m)</span><br><span class="line">                            dp[i][j + <span class="number">1</span>][son[k][<span class="number">0</span>]][l | val[son[k][<span class="number">0</span>]]] += dp[i][j][k][l],dp[i][j + <span class="number">1</span>][son[k][<span class="number">0</span>]][l | val[son[k][<span class="number">0</span>]]] %= mod;</span><br><span class="line">                    &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> qsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= cnt; ++ i)</span><br><span class="line">            qsum += dp[n][m][i][<span class="number">3</span>],qsum %= mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,qsum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Trie;</span><br></pre></td></tr></table></figure>
<p>带矩阵优化的AC自动机</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> son[<span class="number">2500</span>][<span class="number">26</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> lst[<span class="number">205</span>],fail[<span class="number">250</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> val[<span class="number">205</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> cnt;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> sum[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sz;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">long</span> <span class="type">long</span> _sz)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = _sz;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;i &lt;= sz; ++ i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">0</span>;j &lt;= sz; ++ j)</span><br><span class="line">                sum[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix c;</span><br><span class="line">        c.<span class="built_in">init</span>(a.sz);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> lim = c.sz;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;i &lt;= sz; ++ i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">0</span>;j &lt;= sz; ++ j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> k = <span class="number">0</span>;k &lt;= sz; ++ k)</span><br><span class="line">                    c.sum[i][j] += a.sum[k][j] * sum[i][k];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix A,<span class="type">long</span> <span class="type">long</span> tms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tms == <span class="number">1</span>) <span class="keyword">return</span> A;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tms == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix E;</span><br><span class="line">        E.<span class="built_in">init</span>(A.sz);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= A.sz; ++ i)</span><br><span class="line">            E.sum[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> E;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix tmp = A;</span><br><span class="line">    tms -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tms)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tms &amp; <span class="number">1</span>) tmp = tmp * A;</span><br><span class="line">        A = A * A;</span><br><span class="line">          tms &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">qpow</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> tms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tms)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tms &amp; <span class="number">1</span>) tmp *= a;</span><br><span class="line">        a *= a;</span><br><span class="line">        tms &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get_id</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">long</span> <span class="type">long</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(son[pos],<span class="number">0</span>,<span class="built_in">sizeof</span>(son[pos]));</span><br><span class="line">        val[pos] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span>* c,<span class="type">long</span> <span class="type">long</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> len = <span class="built_in">strlen</span>(c);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;i &lt; len; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> v = son[u][<span class="built_in">get_id</span>(c[i])];</span><br><span class="line">            <span class="keyword">if</span>(!v)</span><br><span class="line">            &#123;</span><br><span class="line">                son[u][<span class="built_in">get_id</span>(c[i])] = ++cnt;</span><br><span class="line">                <span class="built_in">init</span>(cnt);</span><br><span class="line">                u = cnt;        </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                u = v;</span><br><span class="line">        &#125;</span><br><span class="line">        val[u] |= id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        queue &lt;<span class="type">long</span> <span class="type">long</span>&gt; q;</span><br><span class="line">        lst[<span class="number">0</span>] = fail[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;i &lt;= <span class="number">25</span>; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> v = son[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">if</span>(v)</span><br><span class="line">            &#123;</span><br><span class="line">                lst[v] = fail[v] = <span class="number">0</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> u = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">            val[u] |= val[lst[u]];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>; ++ i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> v = son[u][i];</span><br><span class="line">                <span class="keyword">if</span>(!v) </span><br><span class="line">                &#123;</span><br><span class="line">                    son[u][i] = son[fail[u]][i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> f = fail[u];</span><br><span class="line">                <span class="keyword">while</span>(f &amp;&amp; !son[f][i]) f = fail[f];</span><br><span class="line">                fail[v] = son[f][i];</span><br><span class="line">                lst[v] = val[fail[v]] ? fail[v] : lst[fail[v]];</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get_mat</span><span class="params">(Matrix&amp; mat)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;i &lt;= cnt; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(val[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">0</span>;j &lt; <span class="number">26</span>; ++ j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> k = son[i][j];</span><br><span class="line">                <span class="keyword">if</span>(val[k]) <span class="keyword">continue</span>;</span><br><span class="line">                mat.sum[i][k] ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;i &lt;= cnt + <span class="number">1</span>; ++ i)</span><br><span class="line">            mat.sum[i][cnt] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Trie;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>字符串</tag>
        <tag>AC自动机</tag>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>等比矩阵求和的另一种思路</title>
    <url>/2018/04/07/DB/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a><strong>引言</strong></h2><p>当我们对一个矩阵进行快速幂时，我们可能需要对矩阵的某一行进行求和，即计算矩阵 $A$ $A^1 + A^2 + A^3 + A^4 + A^5 + \ldots + A^n$ 中的第一行的和。</p>
<h2 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a><strong>如何解决？</strong></h2><span id="more"></span>

<p>考虑对矩阵右侧加一行 $1$<br>例如，假设原矩阵是<br>$$<br>\begin{bmatrix}<br>a_1&amp;a_2\<br>a_3&amp;a_4\<br>\end{bmatrix}<br>$$<br>对于矩阵转换后，我们有:<br>$$<br>\begin{bmatrix}<br>a_1&amp;a_2&amp;1\<br>a_3&amp;a_4&amp;1\<br>0&amp;0&amp;1\<br>\end{bmatrix}<br>$$<br>考虑对这个矩阵进行乘方<br>矩阵的二次幂为<br>$$<br>\begin{bmatrix}<br>a_1^2+a_2a_3+0&amp;a_1a_2+a_2a_4+0&amp;a_1+a_2+1\<br>a_1a_3+a_3a_4+0&amp;a_2a_3+a_4^2+0&amp;a_3+a_4+1\<br>0+0+0&amp;0+0+0&amp;0+0+1\<br>\end{bmatrix}<br>$$<br>首先我们可以观察到 <strong>右侧增加的一行1对矩阵的本身乘方无影响</strong><br>其次，考虑右侧的一列的数值，可发现其数值等于第一行的 $1$ 次方的和。<br>由矩阵乘法的性质：<br>最右一列的值在数值上等于对应列的第一个元素+对应列的第二个元素+对应列的第三个元素+…+1</p>
<p>考虑再乘一次转换后的矩阵，我们可以得到一个喜闻乐见的性质：<br>最右一列的数值，等于该矩阵的一次方的对应行的和 + 该矩阵二次方的对应行的和 + 1</p>
<p>至此，我们的问题已经解决，最后某一行的和，就等于对应行的和减去 $1$</p>
<h2 id="为什么这样做是正确的"><a href="#为什么这样做是正确的" class="headerlink" title="为什么这样做是正确的"></a><strong>为什么这样做是正确的</strong></h2><p>首先，我们在末尾一行补了 $0$ ，这样便不会影响到原矩阵的乘法(即最后的一项始终是 $0$)</p>
<p>其次，最后一行的值在矩阵乘法中不会发生变化，该为 $0$ 的始终为 $0$ ，为 $1$ 的始终为 $1$</p>
<p>最后，我们考虑最后一列的值，以第一行举例：<br>在第一次乘方后，数值上等于 第一行矩阵各元素的和 + 1<br>第二次乘方前，由于第一行除了最后一列外所有的元素均为原本矩阵二次幂后的值，因此最后一列数值上等于 原本矩阵第一行二次幂后的值 + 原本矩阵一次幂后的值 + 1.<br>此时考虑原矩阵，最后一列的值已经不是 $1$ 而是一次幂元素的和 + 1，因此 $1$ 不会被重复累计。</p>
<p>这样乘下去，最终第一行前 $n$ 次幂的和会等于矩阵第一行的和 - 1</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>矩阵乘法</tag>
        <tag>数论</tag>
        <tag>证明</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑学笔记</title>
    <url>/2023/09/21/%E6%8B%93%E6%89%91%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="00-Lecture-Info"><a href="#00-Lecture-Info" class="headerlink" title="00. Lecture Info"></a>00. Lecture Info</h2><h3 id="1-考核"><a href="#1-考核" class="headerlink" title="1. 考核"></a>1. 考核</h3><p>作业 20%、期中 30%、期末 50%</p>
<h3 id="2-作业"><a href="#2-作业" class="headerlink" title="2. 作业"></a>2. 作业</h3><p>每周四上午 9：50 之前提交</p>
<h3 id="3-答疑"><a href="#3-答疑" class="headerlink" title="3. 答疑"></a>3. 答疑</h3><p>周二下午 2:00-3:00 荷二 103</p>
<h3 id="4-内容"><a href="#4-内容" class="headerlink" title="4. 内容"></a>4. 内容</h3><ul>
<li>基础内容：点集拓扑、代数拓扑</li>
<li>拓展内容；</li>
</ul>
<span id="more"></span>

<h3 id="一点牢骚"><a href="#一点牢骚" class="headerlink" title="一点牢骚"></a>一点牢骚</h3><p>很好，又是用 md 追赶手写板书的一门课程，竟然也是英文板书。希望不要像复分析一样上到一半就没兴趣追了（</p>
<h2 id="01-⚪神，启动"><a href="#01-⚪神，启动" class="headerlink" title="01. ⚪神，启动"></a>01. ⚪神，启动</h2><h3 id="拓扑学研究的范畴"><a href="#拓扑学研究的范畴" class="headerlink" title="拓扑学研究的范畴"></a>拓扑学研究的范畴</h3><ul>
<li><h4 id="范畴的观点（Categories）"><a href="#范畴的观点（Categories）" class="headerlink" title="范畴的观点（Categories）"></a><strong>范畴</strong>的观点（Categories）</h4><ul>
<li>研究对象（Objects）</li>
<li>态射（Morphism）</li>
</ul>
<p>这些观点通常对应了数学中的不同分支（Subjects）</p>
<p>eg.</p>
<p>线性代数 对应 线性范畴（研究对象：线性空间；态射：线性映射）</p>
<p>抽象代数 对应 群范畴（研究对象：群；态射：群同态）</p>
<p>类似：环范畴、环、环同态</p>
<p>拓扑学 对应 拓扑空间范畴（研究对象：拓扑空间；态射：连续映射）</p>
</li>
<li><h4 id="拓扑学研究的例子"><a href="#拓扑学研究的例子" class="headerlink" title="拓扑学研究的例子"></a>拓扑学研究的例子</h4><p>凸多面体的欧拉公式（Euler’s Formula）：设 $\chi&#x3D;v-e+f$ ，其中 $v$ 是顶点个数，$e$ 是棱的个数，$f$ 是面的个数（vertice, edge, face），则 $\chi&#x3D;2$。称 $\chi$ 为欧拉示性数（Euler Characteristic）</p>
<p>另一个例子：仍然取一个凸多面体，但在上面挖掉小立方体，如下图所示：</p>
<p><img src="/01-1.png" alt="image-20230919153324783"></p>
<p>在这种情况下，上半面不能再称之为面（不再单连通），需要多加一条棱如下图所示：</p>
<p><img src="/01-2.png" alt="image-20230919153445258"></p>
<p>在增加一条棱后，计算此时的欧拉示性数有 $\chi&#x3D;2$.</p>
<p>进一步地：</p>
<p>仍然对大的立方体做操作，如图所示：</p>
<p><img src="/01-3.png" alt="image-20230919153756873"></p>
<p>我们做类似的操作切面：</p>
<p><img src="/01-4.png" alt="image-20230919153821373"></p>
<p>然而此时的 $\chi&#x3D;0$，不再为 $2$ 了。（为什么？最后一个图形无法通过连续形变变成球面，只能变成环面（Torus&#x3D;:$T$））</p>
<p>将来我们会证明关于欧拉示性数的事实：$\chi(S^2)&#x3D;2$；$\chi(T)&#x3D;0$</p>
<p>更一般地，令 $\sum_g$ 为形如下图的曲面：</p>
<p><img src="/01-5.png" alt="image-20230919154302800"></p>
<p>那么有 $\chi(\Sigma_g)&#x3D;2-2g$.</p>
<p>于是有下述结论：欧拉示性数 $\chi$ 是一个<strong>拓扑不变量</strong>（Topological Invariant），拓扑不变量也将是这门课程研究的重点。</p>
<p>所谓<strong>拓扑不变量</strong>指的是：</p>
<ul>
<li>其被连续的形状变化所保持。</li>
<li>拓扑不变量可以是数字，也可以是更复杂的代数结构，例如群或环。</li>
<li>拓扑不变量是拓扑学这门课程主要研究的对象。</li>
</ul>
</li>
<li><h4 id="连续映射"><a href="#连续映射" class="headerlink" title="连续映射"></a>连续映射</h4><ul>
<li><p><strong>数学分析对连续映射的定义</strong></p>
<p>$f:\mathbb R^m\to \mathbb R^n$</p>
<p>定义：映射 $f$ 被称为是在 $x\in \mathbb{R}^m$ 连续的，如果有 $\forall \varepsilon&gt;0,\exists \delta&gt;0$，使得若 $|x’-x|&lt;\delta$，则 $|f(x’)-f(x)|&lt;\varepsilon$。</p>
<p>如果 $f$ 在 $\mathbb R^m$ 处处连续，则称 $f$ 是连续函数。</p>
</li>
<li><p><strong>度量 (Metric)</strong></p>
<p>回顾欧氏空间中在 $\mathbb R^n $ 上的 $|\cdot |$，它诱导了连续性。</p>
</li>
<li><p><strong>度量空间 (Metric Space)</strong></p>
<p>定义：集合 $X$ 被称为是一个度量空间，如果存在映射 $d:X\times X\to \mathbb R$，满足下面几个公理</p>
<ul>
<li>$d(x_1,x_2)&#x3D;0$ 当且仅当 $x_1&#x3D;x_2$；</li>
<li>$d(x_1,x_2)&#x3D;d(x_2,x_1)$（对称性）；</li>
<li>$d(x_1,x_3)\leq d(x_1,x_2)+d(x_2,x_3)$（三角不等式）；</li>
</ul>
<p>$\forall x_1,x_2,x_3\in X$，则称 $d$ 是一个度量，$(X,d)$ 是一个度量空间。</p>
<p>注：由三条公理可以推出距离的非负性：令 $x_1&#x3D;x_3$，有 $d(x_1,x_3)\leq 2 d(x_1,x_2)$，从而 $d(x_1,x_2)\geq 0$.</p>
</li>
<li><p><strong>基础的度量空间例子</strong></p>
<ul>
<li>$\forall x_1&#x3D;(x_1^1,\cdots,x_1^n),x_2&#x3D;(x_2^1,\cdots,x_2^n)\in \mathbb R^n$，令 $d(x_1,x_2)&#x3D;\sqrt{\sum_{i&#x3D;1}^n(x_1^i-x_2^i)^2}$，则 $(\mathbb R^n,d)$ 是一个度量空间（最熟悉的欧式空间）</li>
<li>更一般地，考虑令 $p\geq 1$，令 $d_p(x_1,x_2)&#x3D;(\sum_{i&#x3D;1}^n|x_1^i-x_2^i|^p)^{1&#x2F;p}$，则 $(\mathbb R^n,d_p)$ 也是一个度量空间</li>
<li>有度量空间 $(X,d)$，考虑子集 $Y\subset X$，则 $(Y,d|_{Y})$ 是一个度量空间</li>
</ul>
</li>
<li><p><strong>度量空间连续性的定义</strong></p>
<p>令 $f:X\to Y$ 度量空间间的映射，定义：</p>
<p>称 $f$ 在点 $x\in X$ 处是连续的，如果 $\forall \varepsilon&gt;0,\exists\delta&gt;0$，使得 $d(f(x),f(x’))&lt;\varepsilon$ 若 $d(x,x’)&lt;\delta$.</p>
<p>称 $f$ 是连续的如果 $f$ 对于每一个 $x\in X$ 都是连续的。</p>
</li>
<li><p><strong>引入：球的概念</strong></p>
<p>对于 $\varepsilon&gt;0$ 以及任意的 $x\in X$，记 $B(x,\varepsilon):&#x3D;{y\in X\mid d(x,y)&lt;\varepsilon}$，称该集合为一个球，球心为 $x$，半径为 $\varepsilon$。</p>
<p>用以改进连续性：$f$ 是 $x$ 是连续的等价于 $\forall\varepsilon&gt;0,\exists \delta&gt;0$，使得 $f(B(x,\delta))\subset B(f(x),\varepsilon)$.</p>
</li>
<li><p><strong>定义：开集 (Open Set)</strong></p>
<p>定义 $X$ 是一个度量空间（今后度量空间略去 $d$），一个集合 $U\subset X$ 称为是开集，若 $\forall x\in U$，$\exists\varepsilon&gt;0$，使得 $B(x,\varepsilon)\subset U$. </p>
<p>与此同时，$\forall x\in U$，我们将 $U$ 称作 $x$ 的一个**邻域 (Neighborhood)**。</p>
<p>事实：$\forall x\in X,\varepsilon&gt;0$，则 $B(x,\varepsilon)$ 一定是开集。</p>
</li>
<li><p><strong>定理</strong></p>
<ul>
<li>(1) 任取一个指标集 $I$（可以为无限集），并集 $\bigcup_{i\in I}U_i$ 是 $X$ 中开集若 $U_i$ $\forall i\in I$ 都是开集.（开集的无限并是开）</li>
<li>(2) 取交集 $\bigcap_{i&#x3D;1}^n U_i$ 仍然是开集若 $U_i\ \forall i&#x3D;1,2,\cdots,n$ 都是开集.（开集的有限交是开）</li>
<li>(3) 全空间 $X$ 与空集 $\varnothing$ 都是开集.</li>
</ul>
<p>证明：</p>
<ul>
<li>(1) 任取 $x\in \bigcup_{i\in I}U_i$，则 $x\in U_i$ 对于某个特定的 $i$，于是 $\exists B(x,\varepsilon)\subset U_i$，因而 $B(x,\varepsilon)\subset \bigcup_{i\in I}U_i$.</li>
<li>(2) $\forall x\in \bigcap_{i&#x3D;1}^n U_i$，则 $x\in U_i, \forall i$，则 $\exists B(x,\varepsilon_i)\subset U_i$，因而 $B(x,\min_i{\varepsilon_i})\subset \bigcap_{i\in I}U_i$.</li>
<li>(3) 显然。</li>
</ul>
<p>注：如果取任意交集 $\bigcap_{i\in I} U_i$，一般情况下，该交集可以不是开集（其中 $U_i$ 皆为开集）。</p>
<p>例如令 $U_i&#x3D;\mathbb R \setminus {\cfrac{1}{i}}$，取交集 $\bigcap_{i&#x3D;1}^\infty U_i&#x3D;\mathbb R\setminus {1,\cfrac{1}{2},\cdots}$，该集合不再是 $\mathbb R$ 里的开集。（对于 $0$，不存在一个球使其包含在该集合中）</p>
</li>
<li><p><strong>定义：闭集 (Close Set)</strong></p>
<p>一个集合 $F\subset X$ 被称为是**闭 (Close)**的，若 $X\setminus F$ 是开集。</p>
</li>
<li><p><strong>关键定理 (连续性)</strong></p>
<p>令 $f:X\to Y$ 其中 $X,Y$ 是度量空间，则 $f$ 是连续映射当且仅当 $f^{-1}(U)$ 在 $X$ 中是开的，$\forall U\subset Y$ 开集。 </p>
<p>证明：</p>
<p>$(\Rightarrow)$：考虑 $\forall x\in f^{-1}(U)$，我们选取 $B(f(x),\varepsilon)\subset U$，由于 $f$ 是连续的，有 $\exists \delta$ 使得 $f(B(x,\delta))\subset B(f(x),\varepsilon)\subset U$.</p>
<p>换言之，$B(x,\delta)\subset f^{-1}(U)$，于是 $f^{-1}(U)$ 是开集。</p>
<p>$(\Leftarrow)$：考虑 $\forall x\in X$，考虑小球 $B(f(x),\varepsilon)\subset Y$，于是 $f^{-1}(B(f(x),\varepsilon))\subset X$ 是开集。</p>
<p>于是 $\exists \delta&gt;0$，使得 $B(x,\delta)\subset f^{-1}(B(f(x),\varepsilon))$，于是 $f(B(x,\delta))\subset B(f(x),\varepsilon)$，于是 $f$ 是连续函数。</p>
</li>
<li><p><strong>定义：拓扑空间 (Topological Space)</strong></p>
<p>一个集合 $X$ 被称为是<strong>拓扑空间</strong>，若存在 $X$ 的子集族 $\tau$，将该子集族中的集合称之为开集，使得：</p>
<ul>
<li>$X,\varnothing\in \tau$</li>
<li>$\forall$ 指标集 $I$，若 $\forall i\in I,U_i\in \tau$，则 $\bigcup_{i\in I}U_i\in \tau$</li>
<li>$U_i\in\tau,\forall i&#x3D;1,\cdots,n$，则 $\bigcap_{i&#x3D;1}^n U_i\in \tau$</li>
</ul>
<p>则称 $X$ 是一个拓扑空间，称 $\tau$ 为 $X$ 上的一个<strong>拓扑</strong>。</p>
</li>
<li><p><strong>例子</strong></p>
<ul>
<li><p>度量空间是特殊的拓扑空间：若 $(X,d)$ 是一个度量空间，则 $d$ 一定诱导了一个 $X$ 上的拓扑。</p>
</li>
<li><p>（子空间拓扑）若 $Y$ 是 $X$ 的子集，$\tau$ 是 $X$ 上的一个拓扑，则 $\tau$ 可以诱导一个 $Y$ 上的拓扑 $\tau|_Y$：</p>
<p>$\forall V\subset Y$，我们称 $V$ 是 $Y$ 里的开集，若 $V$ 可以被写成如下的形式：$U\cap Y$，其中 $U\in \tau$.</p>
<p>可以验证 $(Y,\tau|_Y)$ 是一个拓扑空间。将这个拓扑空间称为 $(X,\tau)$ 的子空间。</p>
</li>
</ul>
</li>
<li><p><strong>定义：连续映射</strong></p>
<p>令 $f:X\to Y$ 是一个拓扑空间间的映射，$f$ 被称为连续映射，如果 $\forall U\subset Y$ 开集，$f^{-1}(U)$ 是 $X$ 中开集。</p>
<p>由此推出拓扑范畴：拓扑空间与拓扑空间的连续映射。</p>
</li>
</ul>
</li>
</ul>
<h3 id="一个可能不那么典型的例子（拓扑可以非常丰富）"><a href="#一个可能不那么典型的例子（拓扑可以非常丰富）" class="headerlink" title="*一个可能不那么典型的例子（拓扑可以非常丰富）"></a>*一个可能不那么典型的例子（拓扑可以非常丰富）</h3><p>通常地，$\mathbb R$ 上的欧式度量会诱导 $\mathbb R$ 上的拓扑；继续取子空间，则其可以诱导一个 $\mathbb Q$ 上的拓扑。</p>
<p>我们换一种度量的观点：令 $p$ 是一个素数，对于非零有理数 $a&#x3D;p^m\cfrac{b}{c}$，其中 $b,c$ 与 $p$ 互素。定义 $p\text{-adic}$ 测量 (p-adic evaluation)：$v_p:\mathbb Q\to\mathbb Z\cup{\infty}$，$v_p(a)&#x3D;m$，$v_p(0)&#x3D;\infty$.</p>
<p>于是：</p>
<p>(1) $v_p(a)&#x3D;\infty$ 当且仅当 $v_p(a)&#x3D;0$</p>
<p>(2) $v_p(ab)&#x3D;v_p(a)+v_p(b)$</p>
<p>于是定义 $p\text{-adic}$ 绝对值：$||\cdot||_p$ 为 $||a||_p&#x3D;p-v_p(a)$</p>
<p>定义 $d(a,b):&#x3D;||a-b||_p$ 称为一个 $p\text{-adic}$ 度量（p-adic metric），这会诱导 $p\text{-adic}$ 拓扑。</p>
<h2 id="02-⚪神，关闭"><a href="#02-⚪神，关闭" class="headerlink" title="02. ⚪神，关闭"></a>02. ⚪神，关闭</h2><h3 id="对闭集的研究"><a href="#对闭集的研究" class="headerlink" title="对闭集的研究"></a>对闭集的研究</h3><ul>
<li><p><strong>回忆：闭集的定义</strong></p>
<p>一个集合 $A\subset X$ 是闭集当 $X\setminus A$ 是开集。</p>
</li>
<li><p><strong>一些例子</strong></p>
<p>$A&#x3D;{(x,y)\mid x^2+y^2&#x3D;1}\subseteq \mathbb R^2$ （此后，若不加特殊说明，空间皆使用欧氏拓扑）</p>
<p>它是一个闭集。</p>
<p>$A&#x3D;{(x,y)\mid x^2+y^2\leq 1}\subseteq \mathbb R^2$</p>
<p>它也是一个闭集。</p>
<p>$A&#x3D;{(x,y)\mid x^2+y^2&#x3D;1,y&gt;0}\subseteq \mathbb R^2$</p>
<p>它不是开集，也不是闭集。</p>
</li>
<li><p><strong>极限点 (limit point) 的定义</strong></p>
<p>定义：令 $A\subset X$，$p\in X$，$p$ 是集合 $A$ 的<strong>极限点 (limit point)</strong> 如果其任意一个邻域都包含了 $A-{p}$ 中至少一个点。</p>
<p>例子：</p>
<ul>
<li><p>令 $X&#x3D;\mathbb R$，欧氏拓扑，令 $A&#x3D;{\cfrac{1}{n}\mid n&#x3D;1,2,3,\cdots}$，则 $A$ 有唯一一个极限点 $0$.</p>
</li>
<li><p>令 $X&#x3D;\mathbb R$，$A&#x3D;[0,1)$，则 $\forall p\in A$，$p$ 是 $A$ 的一个极限点，与此同时 $1$ 也是 $A$ 的极限点。</p>
</li>
<li><p>令 $X&#x3D;\mathbb R$，$A&#x3D;\mathbb Q$，则 $\forall p\in X$ 都是 $A$ 的极限点。</p>
</li>
<li><p>令 $X&#x3D;\mathbb C$，在 $\mathbb C$ 上定义 Zariski Topology，定义 $X$ 的一个子集是开集，如果它的补集是有限集或全空间 $X$.</p>
<p>考虑 $f(t)\in \mathbb C[t]$ 是一个复系数单变量多项式，即 $f(t)$ 可以写成如下形式：$a(t-a_1)\cdots(t-a_n)$. 其中 $a_1,\cdots,a_n\in \mathbb C$。</p>
<p>一个集合 $A\subset X$ 是闭集，当且仅当 $A$ 是有限集或 $A$ 是全空间 $X$，这等价于 $A$ 是某一个多项式的零点集。这即为 Zariski Topology 的定义动机。</p>
<p>我们来考察极限点。若集合 $A$ 是有限集，那么 $A$ 没有极限点；若集合 $A$ 是无限集，则任意 $p\in X$ 都是 $A$ 的极限点。</p>
<p>(*)更多地，我们还可以考虑 Zariski Topology 在 $\mathbb C^n$ 时的情形。</p>
<p>一个集合 $A\subseteq \mathbb C^n$ 是闭集，如果 $A$ 是某一些多项式的零点 $f_1,f_2,\cdots,f_m\in \mathbb C[t_1,\cdots,t_n]$.</p>
</li>
</ul>
</li>
<li><p><strong>闭集一般性的定义</strong></p>
<p>定理：一个集合是闭集，当且仅当它包含了自己的所有极限点。</p>
<p>证明：</p>
<p>$(\Rightarrow)$：令 $A\subset X$ 是一个闭集，根据定义，$X\setminus A$ 是一个开集。于是 $\forall p\in X\setminus A$，有 $X\setminus A$ 是 $p$ 的邻域，且该邻域与 $A$ 不交。于是 $p$ 不是 $A$ 的极限点。</p>
<p>$(\Leftarrow)$：令 $p\in X\setminus A$，因为 $p$ 不是 $A$ 的极限点，$\exists $ 邻域 $U_p$，使得 $U_p\subset X\setminus A$，因而 $X\setminus A&#x3D;\bigcup_{p\in X\setminus A} U_p$ 是开集，因此 $A$ 是一个闭集。</p>
</li>
<li><p><strong>闭包 (closure) 的定义</strong></p>
<p>定义：从集合 $A$ 出发，将 $A$ 本身与它所有的极限点并起来，将这称作集合 $A$ 的闭包，记作 $\bar A$.</p>
<p>定理：$A$ 的闭包是包含 $A$ 的最小闭集。</p>
<ul>
<li><p>对定理中“最小”的解释</p>
<p>有两种不同的（等价的）表达方式。</p>
<ul>
<li>$\bar A&#x3D;\bigcap_{B\supset A, B\text{ is closed}} B$</li>
<li>$\bar A$ 是闭集，且对于 $\forall B\supset A$ 且 $B$ 为闭集，都有 $A\subset\bar A\subset B$.</li>
</ul>
</li>
</ul>
<p>证明：</p>
<p>首先证明 $\bar A$ 是一个闭集。</p>
<p>$\forall p\in X\setminus \bar A$，$p$ 一定不是 $A$ 的极限点，于是 $\exists$ 邻域 $U_p$ 使得 $U_p\cap A&#x3D;\varnothing$.</p>
<p>另一方面，$\forall q\in U_p$，有 $U_p$ 也是 $q$ 的邻域，因此 $q$ 不是 $A$ 的极限点。因此 $U_p\cap \bar A&#x3D;\varnothing$.</p>
<p>因此 $U_p\subset X\setminus \bar A$，因此 $X\setminus \bar A&#x3D;\bigcup_{p\in X\setminus \bar A}U_p$，因此 $X\setminus \bar A$ 是开集，因此 $\bar A$ 是闭集。</p>
<p>接着我们来证明最小性。</p>
<p>若 $B$ 是一个闭集且 $A\subset B$，则有 $\forall$ $A$ 的极限点也是 $B$ 的极限点。因为 $B$ 是闭集，这些极限点都落在其中，于是 $B$ 包含了所有 $A$ 的极限点。因此 $\bar A\subset B$.</p>
<p>推论：若 $A\subset X$，则 $A$ 是闭集当且仅当 $A&#x3D;\bar A$.</p>
</li>
<li><p><strong>稠密 (dense) 的定义</strong></p>
<p>定义：$A\subset X$ 被称为是稠密的，如果 $\bar A&#x3D;X$.</p>
<p>例子：$\mathbb{Q}\subseteq\mathbb{R}$ 是稠密的。</p>
</li>
<li><p><strong>内部点 (interior point) 的定义</strong></p>
<p>定义：$x\subset A$ 被称作一个内部点当 $\exists$ $x$ 的邻域 $U$ 使得 $U\subseteq A$.</p>
<p>记 $\mathring A&#x3D;{x\in A\mid x \text{ 是内部点}}$.</p>
<p>例子：</p>
<p>令 $A&#x3D;{(x,y)\mid x^2+y^2\leq 1}\subseteq \mathbb R^2$，则 $\mathring A&#x3D;{(x,y)\mid x^2+y^2&lt;1}\subseteq \mathbb R^2$</p>
</li>
<li><p><strong>边界点 (frontier point &#x2F; boundary point) 的定义</strong></p>
<p>定义：$x\in X$ 被称为 $A$ 的边界点（请注意定义域），如果 $x$ 既不是 $A$ 的内部点也不是 $X\setminus A$ 的内部点。</p>
<p>例子：</p>
<p>$A_1&#x3D;{(x,y)\mid x^2+y^2\leq1}\subseteq \mathbb R^2$，若定义 $C&#x3D;{(x,y)\mid x^2+y^2&#x3D;1}$，则 $C$ 就是 $A_1$ 边界点的集合。</p>
<p>$A_2&#x3D;{(x,y)\mid x^2+y^2&lt;1}\subseteq \mathbb R^2$，仍如上定义 $C$，则 $C$ 也是 $A_2$ 边界点的集合。</p>
<p>（$A$ 的边界点未必包含于 $A$ 中）</p>
<p>$0,1$ 都是下面集合的边界点：$[0,1)\subseteq \mathbb{R}$.</p>
</li>
<li><p><strong>拓扑基 (basis &#x2F; base) 的定义</strong></p>
<p>定义：令 $\beta$ 是一个由某一些 $X$ 中开集构成的集族，假设 $X$ 中的每一个开集都可以表示为 $\beta$ 中成员的并，则称 $\beta$ 是 $X$ 的一组<strong>基</strong>。把 $\beta$ 中的元素称作基础开集。</p>
<p>例子：</p>
<p>$X$ 是度量空间，则 $\beta:&#x3D;{B(x,\varepsilon)\mid x\in X,\varepsilon&gt;0}$ 是 $X$ 的一组拓扑基。</p>
<p>定理：令 $X$ 是一个集合，令 $\beta$ 是 $X$ 中集族且 $\beta$ 不为空，假设 $\bigcup_{B\in\beta}B&#x3D;X$ 且 $\forall B_1,B_2\in \beta$，$\forall x\in B_1\cap B_2$，$\exists B_{3x}\in \beta$，使得 $x\in B_{3}^x$ 且 $B_{3}^x\subset B_1\cap B_2$，则我们可以定义 $X$ 中开集为 $\beta$ 中成员的任意并，则这个定义给出了 $X$ 上的一个拓扑。</p>
<p>证明：$U_i&#x3D;\bigcup_j B_{ij}$，$B_{ij}\in \beta$，$\bigcup_i U_i&#x3D;\bigcup_{ij}B_{ij}$，因此为开；</p>
<p>$U_1&#x3D;\bigcup_{i}B_{1i}$，$U_2&#x3D;\bigcup_{j}B_{2j}$，$B_{1i}B_{2j}\in \beta$，则 $U_1\cap U_2&#x3D;\bigcup_{ij}(B_{1i}\cap B_{2j})$ ，因此只需要证明 $\forall B_1,B_2\in\beta$，有 $B_1\cap B_2$ 为开集。证明：$\forall x\in B_1\cap B_2$，$\exists B_{3}^x$ 使得 $x\in B_{3x}$，有 $B_{3}^x\subset B_1\cap B_2$，因此 $\bigcup_{x\in B_1\cap B_2} B_{3}^x&#x3D;B_1\cap B$ 是开集.</p>
<p>显然 $X,\varnothing$ 都是开集。综上这构成拓扑。</p>
</li>
</ul>
<h3 id="对连续映射的研究"><a href="#对连续映射的研究" class="headerlink" title="对连续映射的研究"></a>对连续映射的研究</h3><ul>
<li><p><strong>回忆：连续映射</strong></p>
<p>$f:X\to Y$ 是连续映射，当且仅当开集的原像也是开集。</p>
</li>
<li><p><strong>连续映射的复合</strong></p>
<p>定理：若有映射 $f:X\to Y$ 与映射 $g:Y\to Z$，若两个映射都是连续映射，则 $g\circ f$ 仍然是连续映射。</p>
<p>证明：根据定义，任取 $U\subset Z$ 为开集，根据连续性，有 $g^{-1}(U)$ 在 $Y$ 中是开集，进一步其在 $f^{-1}(g^{-1}(U))$ 在 $X$ 中是开集。因此得出结论。</p>
</li>
<li><p><strong>限制到子空间的连续性</strong></p>
<p>定理：令 $f:X\to Y$ 是连续映射，取子空间 $A\subseteq X$ 采用子空间拓扑，则 $f|_A:A\to Y$ 仍然是连续映射。</p>
<p>证明：令 $U\subset Y$ 是一个开集，因此 $f^{-1}(U)$ 是 $X$ 中开集，则 $(f|_A)^{-1}(U)&#x3D;A\cap f^{-1}(U)$，其为 $A$ 中开集。因此得出结论</p>
</li>
<li><p><strong>连续性的等价叙述</strong></p>
<p>定理：下面的叙述是等价的：</p>
<p>(1) $f:X\to Y$ 是连续映射；</p>
<p>(2) 若 $\beta$ 是 $Y$ 的拓扑基，基础开集的原像还是开集；</p>
<p>(3) $f(\bar A)\subset \overline{f(A)}, \forall A\subset X$</p>
<p>(4) $\overline{f^{-1}(B)}\subset f^{-1}(\bar B),\forall B\subset Y$.</p>
<p>(5) $f^{-1}(A)$ 总是一个闭集，$\forall$ 闭集 $A\subset Y$.</p>
<p>证明：</p>
<p>$(1)\Rightarrow (2)$ 显然成立；</p>
<p>$(2)\Rightarrow(3)$：$f(A)\subset \overline{f(A)}$ 是显然的。令 $x\in \bar A\setminus A$。假设 $f(x)\not\in f(A)$，令 $U$ 是一个 $f(x)$ 在 $Y$ 中邻域，可以找到一个基础开集 $B$ 使得 $f(x)\in B\subset U$. </p>
<p>由于 $f^{-1}(B)$ 是开集且 $x\in f^{-1}(B),x\in \bar A\setminus A$，有 $f^{-1}(B)\cap A\neq \varnothing$，于是 $f(A)\cap B\neq \varnothing$，于是 $f(A)\cap U\neq\varnothing$。</p>
<p>介于 $U$ 的任意性，于是 $f(x)$ 是 $f(A)$ 的极限点，于是得出结论。</p>
<p>$(3)\Rightarrow (4)$：$f(\overline{f^{-1}(B)})\subset \overline{f(f^{-1}(B))}\subset \overline B$，因此 $\overline{f^{-1}(B)}\subset f^{-1}(\bar B)$。</p>
<p>$(4)\Rightarrow (5)$：令 $B\subset Y$ 是闭集，则 $B&#x3D;\bar B$，于是 $\overline{f^{-1}(B)}\subset f^{-1}(\bar B)&#x3D;f^{-1}(B)$，因此 $f^{-1}(B)&#x3D;\overline{f^{-1}(B)}$，因此 $f^{-1}(B)$ 是闭集。</p>
<p>$(5)\Rightarrow(1)$：显然。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>拓扑学</tag>
      </tags>
  </entry>
</search>
